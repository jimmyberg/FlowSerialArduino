
#include "Arduino.h"
#include "flowSerial.h"

FlowSerial::FlowSerial(int baudrate, int regSize, char IDinit){
  Serial.begin(baudrate);
  ID = IDinit;
  debugEnable = false;
  Serial.flush();
  inboxRegisterAt = 0;
  inboxAvailable = 0;
  //serialReg[20] = 0;
}

void FlowSerial::update(){
  while(Serial.available() != 0){
    unsigned char byteIn = Serial.read();
    switch(process){
      case 0:
        if(byteIn == 0xAA){
          checksumInbox = 0xAA;
          timeoutTime = millis();
          process = 1;
          if(debugEnable == true){
            sendDebugInfo("0xAA recieved.", 14);
          }
        }
        break;
      case 1:
        instruction = byteIn;
        checksumInbox += byteIn;
        argumentBufferAt = 0;
        process = 2;
        if(debugEnable == true){
          Serial.println("instruction recieved");
        }
        break;
      case 2:
        if(instruction != 0x00){
          checksumInbox += byteIn;
        }
        switch(instruction){
          case 0x00:
            LSBchecksumIn = byteIn;
            process = 4;
            if(debugEnable == true){
              Serial.println("LSB recieved");
            }
            break;
          case 0x01:
            argumentBuffer[argumentBufferAt] = byteIn;
            argumentBufferAt++;
            if(argumentBufferAt >= 2){
              process = 0x03;
            }
            break;
          case 0x02:
            argumentBuffer[argumentBufferAt] = byteIn;
            argumentBufferAt++;
            if(argumentBufferAt >= 2 && argumentBufferAt >= argumentBuffer[1] + 2){
              process = 0x03;
            }
            break;
          case 0x03:
            argumentBuffer[argumentBufferAt] = byteIn;
            argumentBufferAt++;
            if(argumentBufferAt >= 2 && argumentBufferAt >= argumentBuffer[1] + 2){
              process = 0x03;
            }
            break;
        }
        break;
      case 3:
        LSBchecksumIn = byteIn;
        if(debugEnable == true){
          Serial.println("LSB recieved");
        }
        process = 0x04;
        break;
      case 4:
        MSBchecksumIn = byteIn;
        if(debugEnable == true){
          Serial.println("MSB recieved");
        }
        process = 0x05;
        break;
    }
  }
  if(process == 0x05){
    if((MSBchecksumIn << 8) | LSBchecksumIn == checksumInbox){
      process = 0x06;
      if(debugEnable == true){
        Serial.println("checksum ok. exucute instruction");
      }
    }
    else{
      process = 0x00;
      instruction = 0x06;
      if(debugEnable == true){
        Serial.print("checksum faulty. ");
        Serial.print((MSBchecksumIn << 8) | LSBchecksumIn);
        Serial.print("recieved. needed: ");
        Serial.println(checksumInbox);
      }
    }
  }
  else if(process == 0x06){
    switch(instruction){
      case 0x00:
        sendID();
        process = 0x00;
        break;
      case 0x01:
        readCommand();
        process = 0x00;
        break;
      case 0x02:
        writeCommand();
        process = 0x00;
        break;
      case 0x03:
        
        break;
      case 0x04:
        
        break;
      case 0x05:
        
        break;
      case 0x06:
        
        break;
    }
  }
  if(millis() - timeoutTime > 150){
    process = 0x00;
  }
}

void FlowSerial::sendID(){
  Serial.write(0xAA);
  Serial.write(0x03);
  Serial.write(0x01);
  Serial.write(ID);
  int serialSum = 0xAE + ID;
  Serial.write(serialSum & 0x00FF);
  Serial.write(serialSum >> 8);
}

void FlowSerial::readCommand(){
  Serial.write(0xAA);
  Serial.write(0x03);
  Serial.write(argumentBuffer[1]);
  int checksumOut = 0xAD + argumentBuffer[1];
  for(int i = 0;i < argumentBuffer[1]; i++){
    Serial.write(serialReg[i + argumentBuffer[0]]);
    checksumOut += serialReg[i + argumentBuffer[0]];
  }
  Serial.write(char(checksumOut));
  Serial.write(char(checksumOut >> 8));
}

void FlowSerial::writeCommand(){
  for(int i = 0;i < argumentBuffer[1]; i++){
    serialReg[i + argumentBuffer[0]] = argumentBuffer[i + 2];
  }
}

void FlowSerial::recieveData(){
  for(int i = 0; i < argumentBuffer[1]; i++){
    inboxBuffer[i + inboxRegisterAt] = argumentBuffer[i + 2];
    inboxAvailable++;
    inboxRegisterAt++;
  }
}

char FlowSerial::read(){
  char charOut = inboxBuffer[inboxRegisterAt - inboxAvailable];
  inboxAvailable--;
  return charOut;
}

int FlowSerial::available(){
  return inboxAvailable;
}

void FlowSerial::transmissionError(boolean resend){
  Serial.write(0xAA);
  Serial.write(0x06);
  if(resend == true){
    Serial.write(0x01);
    Serial.write(0xb1);
  }
  else{
    Serial.write(0x00);
    Serial.write(0xb0);
  }
  Serial.write(0x00);
}

void FlowSerial::sendDebugInfo(String text, int textLength){
  Serial.write(0xAA);
  Serial.write(0x04);
  Serial.write(textLength);
  int serialSum = 0xAE + textLength;
  for(int i = 0; i < textLength; i++){
    Serial.write(text[i]);
    serialSum += text[i];
  }
  Serial.write(char(serialSum));
  Serial.write(char(serialSum >> 8));
}

void FlowSerial::write(byte address, byte out[], int quantity){
  Serial.write(0xAA);
  Serial.write(0x02);
  Serial.write(address);
  Serial.write(quantity);
  int serialSum = 0xAC + address + quantity;
  for(int i = 0; i < quantity; i++){
    Serial.write(out[i]);
    serialSum += out[i];
  }
  Serial.write(char(serialSum));
  Serial.write(char(serialSum >> 8));
}

void FlowSerial::write(byte address, byte out){
  Serial.write(0xAA);
  Serial.write(0x02);
  Serial.write(address);
  Serial.write(0x01);
  int serialSum = 0xAD + address + out;
  Serial.write(out[i]);
  
  Serial.write(char(serialSum));
  Serial.write(char(serialSum >> 8));
}
